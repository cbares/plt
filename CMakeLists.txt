cmake_minimum_required(VERSION 3.18)
project(plt)

# CMP0074 policy enable find_* to use <PackageName>_ROOT variables to find
# packages.
if(POLICY CMP0074)
  cmake_policy(SET CMP0074 NEW)
endif()
if(POLICY CMP0167)
  cmake_policy(SET CMP0167 NEW)
endif()

# Include helper functions
list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)
list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake/modules)
include(GenerateDiaHeader)

# Export executables to "bin" directory
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/bin)

# Enable C++17
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
add_compile_options(-Wall -Wextra)

# Enable Debug and Release builds
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Debug CACHE STRING
    "Build type, Debug or Release" FORCE)
endif()
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")


# Add code coverage support for Gcov using GCC
set(BUILD_CODE_COVERAGE ON CACHE BOOL
  "Set BUILD_CODE_COVERAGE to OFF to disable code coverage")
if(BUILD_CODE_COVERAGE AND NOT UNIX)
  message(WARNING "Code coverage is only available for UNIX systems")
  set(BUILD_CODE_COVERAGE OFF)
elseif(BUILD_CODE_COVERAGE AND NOT CMAKE_COMPILER_IS_GNUCC AND NOT CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  message(WARNING "Code coverage is only available for GNU compiler and Clang compiler")
  set(BUILD_CODE_COVERAGE OFF)
endif()

message(STATUS "Code coverage: ${BUILD_CODE_COVERAGE}")
if(BUILD_CODE_COVERAGE)
  include(CodeCoverage)
  APPEND_COVERAGE_COMPILER_FLAGS()
  # Exclude all code not directly generated by user from code coverage
  set(COVER_GCOVR_EXCLUDES
    "/usr/*"
    "${PROJECT_SOURCE_DIR}/test/*"
    "${PROJECT_SOURCE_DIR}/extern/*"
  )

  message(STATUS "exluded path for coverage: ${COVER_GCOVR_EXCLUDES}")

  # Create script to run tests for code coverage
  set(test_runner "${CMAKE_CURRENT_BINARY_DIR}/run_test.sh")
  file(CONFIGURE
          OUTPUT ${test_runner}
          CONTENT
          "#!/bin/sh\n\
${CMAKE_COMMAND} -E copy \"${CMAKE_CURRENT_BINARY_DIR}/DartConfiguration.tcl\" \
\"${CMAKE_CURRENT_BINARY_DIR}/test/DartConfiguration.tcl\"\n\
${CMAKE_CTEST_COMMAND} -j --output-on-failure --timeout 300 \
--test-dir \"${CMAKE_CURRENT_BINARY_DIR}/test\" || /bin/true\n"
          )
  file(CHMOD ${test_runner} PERMISSIONS
    OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)

  # Create target for code coverage
  SETUP_TARGET_FOR_COVERAGE_LCOV(
          NAME code-coverage
          EXECUTABLE ${test_runner}
          DEPENDS ${test_runner}
          EXCLUDE ${COVER_GCOVR_EXCLUDES}
          LCOV_ARGS "--ignore-errors" "mismatch,mismatch,inconsistent"
    )
  SETUP_TARGET_FOR_COVERAGE_GCOVR_XML(
          NAME code-coverage-gcov
          EXECUTABLE ${test_runner}
          DEPENDS ${test_runner}
          EXCLUDE ${COVER_GCOVR_EXCLUDES}
    )
endif()

# Build dia2code
add_subdirectory(extern/dia2code)

# Add PTHREADs Lib
set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)
message(STATUS "PThreads library found: ${Threads_FOUND}")

# Add BOOST lib
find_package(Boost 1.74...1.999 REQUIRED COMPONENTS graph unit_test_framework)
message(STATUS "Boost libraries: ${Boost_LIBRARIES}")
message(STATUS "Boost include directory: ${Boost_INCLUDE_DIRS}")

# Add option to enable special build for ENSEA's machines
set(MACHINE_ENSEA OFF CACHE BOOL
  "Set MACHINE_ENSEA to ON to build on the CentOS machine at ENSEA")

# Find library jsoncpp
set(jsoncpp_include_dir "${PROJECT_SOURCE_DIR}/extern/jsoncpp-1.8.0")
file(GLOB_RECURSE jsoncpp_sources extern/jsoncpp-1.8.0/*.cpp)

# Find library SFML
if(WIN32)
  set(SFML_ROOT "D:/Utils/SFML-2.3" CACHE STRING
    "Root directory for SFML library")
  set(CMAKE_MODULE_PATH "${SFML_ROOT}/cmake/Modules" ${CMAKE_MODULE_PATH})
else(WIN32)
  set(CMAKE_MODULE_PATH "/usr/share/SFML/cmake/Modules/" ${CMAKE_MODULE_PATH})
endif(WIN32)
if(${MACHINE_ENSEA})
  set(SFML_ROOT "/usr/lsa")
  set(CMAKE_MODULE_PATH "${SFML_ROOT}/share/SFML/cmake/Modules/" ${CMAKE_MODULE_PATH})
endif()
find_package(SFML 2 COMPONENTS graphics network window system)
if(NOT ${MACHINE_ENSEA})
  set(SFML_LIBRARIES sfml-graphics sfml-network sfml-window sfml-system)
endif()

# Find library libmicrohttpd
find_library(
  MHD_LIBRARY
  NAMES microhttpd microhttpd-10 libmicrohttpd libmicrohttpd-dll
  DOC "microhttpd library"
)

# Add source subdirectories
add_subdirectory(src/shared)
add_subdirectory(src/client)
#add_subdirectory(src/server)

# Rapport generation
add_subdirectory(rapport)

# Unit tests
include(CTest)
# Set BUILD_TESTING to OFF in CMakeCache to disable tests
if(BUILD_TESTING)
  # Include tests scripts
  add_subdirectory(test)
endif()


# vim: set sw=2 sts=2 et:
